<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Archit Baweja <bighead@users.sourceforge.net>
 Copyright (C) 2004 Archit Baweja <bighead@users.sourceforge.net>
 Copyright (C) 2005 Michael Witrant <mike@lepton.fr>
 Copyright (C) 2006 Gabriel Bauman <gbauman@gmail.com>
 Copyright (C) 2009 Alexandre da Silva <lexrupy@gmail.com>
 Copyright (C) 2011 Jan Lelis <mail@janlelis.de>

 This library is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

-->
<language id="ruby" _name="Ruby" version="2.0" _section="Scripts">
  <metadata>
    <property name="mimetypes">application/x-ruby;text/x-ruby</property>
    <property name="globs">*.rb;*.gemspec;*.rake;*.ru;*thor;Rakefile;Capfile;Gemfile;Thorfile;.irbrc</property>
    <property name="line-comment-start">#</property>
    <property name="block-comment-start">=begin</property>
    <property name="block-comment-end">=end</property>
  </metadata>

  <styles>
    <style id="method"                _name="Method or local variable"       map-to="def:type"/>
    <style id="important-method"      _name="Important methods"     map-to="def:builtin"/>
    <style id="keyword"               _name="Keyword"               map-to="def:keyword"/>
    <style id="syntax-chars"          _name="Syntactical characters" map-to="ruby:keyword"/>
    <style id="special-value"         _name="nil, false, true"      map-to="def:boolean"/>
    <style id="self"                  _name="self"                  map-to="ruby:special-value"/>
    <style id="true"                  _name="true"                  map-to="ruby:special-value"/>
    <style id="false"                 _name="false"                 map-to="ruby:special-value"/>
    <style id="nil"                   _name="nil"                   map-to="ruby:special-value"/>

    <style id="important-constant"    _name="Important constant"    map-to="def:special-constant"/>
    <style id="constant"              _name="Constant"              map-to="def:constant"/>

    <style id="comment"               _name="Comment"               map-to="def:comment"/>
    <style id="encoding-comment"      _name="Magic Comment"         map-to="def:shebang"/>
    <style id="comment-tag"           _name="YARD comment tag"      map-to="def:doc-comment"/>
    <!--style id="comment-tag-value"     _name="YARD comment tag value" map-to="def:doc-comment-element"/-->
 
    <style id="floating-point"        _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"               _name="Integer number"        map-to="def:decimal"/>
    <style id="base-n-integer"        _name="Base-N number"         map-to="def:base-n-integer"/>

    <style id="string"                _name="String"                map-to="def:string"/>
    <style id="character"             _name="Character in question mark notation"   map-to="def:character"/>
    <style id="symbol"                _name="Symbol"                map-to="ruby:string"/>
    <style id="regex"                 _name="Regular expression"    map-to="ruby:string"/>
    <style id="heredoc"               _name="Heredoc"               map-to="ruby:string"/>
    <style id="collection"            _name="Collection (Arrays, Hashes)"   map-to="def:type"/>
    <style id="escape"                _name="Escaped Character"     map-to="def:special-char"/>

    <style id="instance-variable"     _name="Instance variable"     map-to="def:identifier"/>
    <style id="class-variable"        _name="Class variable"        map-to="def:identifier"/>
    <style id="global-variable"       _name="Global variable"       map-to="def:identifier"/>
    <style id="special-variable"      _name="Special variable"      map-to="ruby:global-variable"/>

    <style id="operator"              _name="Operators"             map-to="def:operator"/>

    <style id="function"              _name="Function definition"   map-to="def:function"/>
  </styles>

  <definitions>

    <context id="escape" style-ref="escape">
      <match>\\((0-7){3}|(x[a-fA-F0-9]{2})|(c\S)|([CM]-\S)|(M-C-\S)|.)</match>
    </context>

    <context id="multiline-comment" style-ref="comment" class-disabled="no-spell-check">
      <start>^=begin</start>
      <end>^=end</end>
      <include>
        <context ref="def:in-comment"/>
        <context ref="in-comment-docs"/>
      </include>
    </context>

    <context id="shell-like-comment" style-ref="comment" end-at-line-end="true" class-disabled="no-spell-check">
      <start>#</start>
      <include>
        <context ref="def:in-comment"/>
        <context ref="in-comment-docs"/>
      </include>
    </context>

    <context id="in-comment-docs" style-ref="comment-tag" extend-parent="false">
      <match>@\w+(\s*\[.*?\])?</match>
    </context>

    <context id="encoding-comment" style-ref="encoding-comment" class="no-spell-check" first-line-only="true">
      <match case-sensitive="false">\s*#.*coding.*</match>
    </context>

    <context id="important-methods" style-ref="important-method">
      <keyword>included</keyword>
      <keyword>extended</keyword>
      <keyword>method_added</keyword>
      <keyword>method_removed</keyword>
      <keyword>method_undefined</keyword>
      <keyword>initialize_copy</keyword>
      <keyword>attr</keyword>
      <keyword>attr_reader</keyword>
      <keyword>attr_writer</keyword>
      <keyword>attr_accessor</keyword>
      <keyword>initialize</keyword>
      <keyword>remove_const</keyword>
      <keyword>append_features</keyword>
      <keyword>extend_object</keyword>
      <keyword>include</keyword>
      <keyword>remove_method</keyword>
      <keyword>undef_method</keyword>
      <keyword>alias_method</keyword>
      <keyword>public</keyword>
      <keyword>protected</keyword>
      <keyword>private</keyword>
      <keyword>module_function</keyword>
      <keyword>define_method</keyword>
      <keyword>default_src_encoding</keyword>
      <keyword>irb_binding</keyword>
      <keyword>remove_instance_variable</keyword>
      <keyword>sprintf</keyword>
      <keyword>format</keyword>
      <keyword>warn</keyword>
      <keyword>raise</keyword>
      <keyword>fail</keyword>
      <keyword>global_variables</keyword>
      <keyword>__method__</keyword>
      <keyword>__callee__</keyword>
      <keyword>eval</keyword>
      <keyword>local_variables</keyword>
      <keyword>iterator?</keyword>
      <keyword>block_given?</keyword>
      <keyword>catch</keyword>
      <keyword>throw</keyword>
      <keyword>loop</keyword>
      <keyword>caller</keyword>
      <keyword>trace_var</keyword>
      <keyword>untrace_var</keyword>
      <keyword>at_exit</keyword>
      <keyword>syscall</keyword>
      <keyword>open</keyword>
      <keyword>printf</keyword>
      <keyword>print</keyword>
      <keyword>putc</keyword>
      <keyword>puts</keyword>
      <keyword>gets</keyword>
      <keyword>readline</keyword>
      <keyword>select</keyword>
      <keyword>readlines</keyword>
      <keyword>p</keyword>
      <keyword>test</keyword>
      <keyword>srand</keyword>
      <keyword>rand</keyword>
      <keyword>trap</keyword>
      <keyword>exec</keyword>
      <keyword>fork</keyword>
      <keyword>exit!</keyword>
      <keyword>system</keyword>
      <keyword>spawn</keyword>
      <keyword>sleep</keyword>
      <keyword>exit</keyword>
      <keyword>abort</keyword>
      <keyword>load</keyword>
      <keyword>require_relative</keyword>
      <keyword>proc</keyword>
      <keyword>lambda</keyword>
      <keyword>binding</keyword>
      <keyword>set_trace_func</keyword>
      <keyword>gem_original_require</keyword>
      <keyword>gem</keyword>
      <keyword>require</keyword>
      <keyword>singleton_method_added</keyword>
      <keyword>singleton_method_removed</keyword>
      <keyword>singleton_method_undefined</keyword>
      <keyword>method_missing</keyword>
      <keyword>autoload</keyword>
      <keyword>autoload\?</keyword>
    </context>

    <context id="keywords" style-ref="keyword">
      <!-- do not highlight methods like .class -->
      <prefix>(?&lt;![\w\.])</prefix>
      <keyword>__ENCODING__</keyword>
      <keyword>__LINE__</keyword>
      <keyword>__FILE__</keyword>
      <keyword>BEGIN</keyword>
      <keyword>END</keyword>
      <keyword>alias</keyword>
      <keyword>and</keyword>
      <keyword>begin</keyword>
      <keyword>break</keyword>
      <keyword>case</keyword>
      <keyword>class</keyword>
      <keyword>defined?</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>elsif</keyword>
      <keyword>end</keyword>
      <keyword>ensure</keyword>
      <keyword>for</keyword>
      <keyword>if</keyword>
      <keyword>in</keyword>
      <keyword>module</keyword>
      <keyword>next</keyword>
      <keyword>not</keyword>
      <keyword>or</keyword>
      <keyword>redo</keyword>
      <keyword>rescue</keyword>
      <keyword>retry</keyword>
      <keyword>return</keyword>
      <keyword>super</keyword>
      <keyword>then</keyword>
      <keyword>undef</keyword>
      <keyword>unless</keyword>
      <keyword>until</keyword>
      <keyword>when</keyword>
      <keyword>while</keyword>
      <keyword>yield</keyword>
    </context>

    <context id="important-constants" style-ref="important-constant">
      <keyword>Object</keyword>
      <keyword>Module</keyword>
      <keyword>Class</keyword>
      <keyword>Kernel</keyword>
      <keyword>NilClass</keyword>
      <keyword>NIL</keyword>
      <keyword>Data</keyword>
      <keyword>TrueClass</keyword>
      <keyword>TRUE</keyword>
      <keyword>FalseClass</keyword>
      <keyword>FALSE</keyword>
      <keyword>Encoding</keyword>
      <keyword>Comparable</keyword>
      <keyword>Enumerable</keyword>
      <keyword>String</keyword>
      <keyword>Symbol</keyword>
      <keyword>Exception</keyword>
      <keyword>SystemExit</keyword>
      <keyword>SignalException</keyword>
      <keyword>Interrupt</keyword>
      <keyword>StandardError</keyword>
      <keyword>TypeError</keyword>
      <keyword>ArgumentError</keyword>
      <keyword>IndexError</keyword>
      <keyword>KeyError</keyword>
      <keyword>RangeError</keyword>
      <keyword>ScriptError</keyword>
      <keyword>SyntaxError</keyword>
      <keyword>LoadError</keyword>
      <keyword>NotImplementedError</keyword>
      <keyword>NameError</keyword>
      <keyword>NoMethodError</keyword>
      <keyword>RuntimeError</keyword>
      <keyword>SecurityError</keyword>
      <keyword>NoMemoryError</keyword>
      <keyword>EncodingError</keyword>
      <keyword>SystemCallError</keyword>
      <keyword>Errno</keyword>
      <keyword>ZeroDivisionError</keyword>
      <keyword>FloatDomainError</keyword>
      <keyword>Numeric</keyword>
      <keyword>Integer</keyword>
      <keyword>Fixnum</keyword>
      <keyword>Float</keyword>
      <keyword>Bignum</keyword>
      <keyword>Array</keyword>
      <keyword>Hash</keyword>
      <keyword>ENV</keyword>
      <keyword>Struct</keyword>
      <keyword>RegexpError</keyword>
      <keyword>Regexp</keyword>
      <keyword>MatchData</keyword>
      <keyword>Marshal</keyword>
      <keyword>Range</keyword>
      <keyword>IOError</keyword>
      <keyword>EOFError</keyword>
      <keyword>IO</keyword>
      <keyword>STDIN</keyword>
      <keyword>STDOUT</keyword>
      <keyword>STDERR</keyword>
      <keyword>ARGF</keyword>
      <keyword>FileTest</keyword>
      <keyword>File</keyword>
      <keyword>Dir</keyword>
      <keyword>Time</keyword>
      <keyword>Random</keyword>
      <keyword>Signal</keyword>
      <keyword>Process</keyword>
      <keyword>Proc</keyword>
      <keyword>LocalJumpError</keyword>
      <keyword>SystemStackError</keyword>
      <keyword>Method</keyword>
      <keyword>UnboundMethod</keyword>
      <keyword>Binding</keyword>
      <keyword>Math</keyword>
      <keyword>GC</keyword>
      <keyword>ObjectSpace</keyword>
      <keyword>Enumerator</keyword>
      <keyword>StopIteration</keyword>
      <keyword>RubyVM</keyword>
      <keyword>Thread</keyword>
      <keyword>TOPLEVEL_BINDING</keyword>
      <keyword>ThreadGroup</keyword>
      <keyword>Mutex</keyword>
      <keyword>ThreadError</keyword>
      <keyword>Fiber</keyword>
      <keyword>FiberError</keyword>
      <keyword>Rational</keyword>
      <keyword>Complex</keyword>
      <keyword>RUBY_VERSION</keyword>
      <keyword>RUBY_RELEASE_DATE</keyword>
      <keyword>RUBY_PLATFORM</keyword>
      <keyword>RUBY_PATCHLEVEL</keyword>
      <keyword>RUBY_REVISION</keyword>
      <keyword>RUBY_DESCRIPTION</keyword>
      <keyword>RUBY_COPYRIGHT</keyword>
      <keyword>RUBY_ENGINE</keyword>
      <keyword>ARGV</keyword>
      <keyword>Gem</keyword>
      <keyword>Exception2MessageMapper</keyword>
      <keyword>IRB</keyword>
      <keyword>RubyToken</keyword>
      <keyword>RubyLex</keyword>
      <keyword>Readline</keyword>
      <keyword>TSort</keyword>
      <keyword>Deprecate</keyword>
      <keyword>RbConfig</keyword>
      <keyword>Date</keyword>
      <keyword>BasicObject</keyword>
    </context>

    <context id="special-variables" style-ref="special-variable">
      <match extended="true">
        \$([;@!~&amp;`'+=,/\\_&gt;&lt;.*?$:"0-9]|
           -[FK0iIvwWdpla]|
           SAFE|
           KCODE|
           FILENAME|
           LOAD_PATH|
           LOADED_FEATURES|
           VERBOSE|
           DEBUG|
           PROGRAM_NAME|
           stdin|
           stdout|
           stderr|
           binding)
      </match>
    </context>

    <define-regex id="variable">[a-zA-Z_][a-zA-Z0-9_]*</define-regex>

    <context id="methods" style-ref="method">
      <match>\%{variable}[!?]?</match>
    </context>

    <context id="global-variables" style-ref="global-variable">
      <match>\$\%{variable}</match>
    </context>

    <context id="class-variables" style-ref="class-variable">
      <match>@@\%{variable}</match>
    </context>

    <context id="instance-variables" style-ref="instance-variable">
      <match>@\%{variable}</match>
    </context>

    <context id="constants" style-ref="constant">
      <match>\b[A-Z][A-Za-z0-9_]*\b</match>
    </context>

    <context id="function">
      <start>(?&lt;![\w\.])(?=def)\b(def)\b</start>
      <end>([^.]+?)(?:[\s(]|$)</end>
      <include>
        <context where="start" sub-pattern="0" style-ref="keyword"/>
        <context where="end"   sub-pattern="1" style-ref="function"/>
        <context ref="ruby:*"/>
      </include>
    </context>

    <context id="operators" style-ref="operator">
      <match>&lt;=&gt;|(?&lt;!%)=(?!&gt;)|~|&lt;|&amp;|(?&lt;!=)&gt;|\*|/|\+|-|\||!</match>
    </context>

    <define-regex id="n">\d(_?\d)*</define-regex>
    <define-regex id="n_pre">(?&lt;!\w)</define-regex>
    <define-regex id="n_suf">(?!\w)</define-regex>

    <context id="float" style-ref="floating-point">
      <match>\%{n_pre}(\%{n}\.\%{n}|\%{n}(\.\%{n})?[eE][+-]?\%{n})\%{n_suf}</match>
    </context>

    <context id="integer" style-ref="decimal">
      <match>\%{n_pre}([1-9](_?[0-9])*|0)\%{n_suf}</match>
    </context>

    <context id="hex" style-ref="base-n-integer">
      <match>\%{n_pre}0[xX][0-9A-Fa-f](_?[0-9A-Fa-f])*\%{n_suf}</match>
    </context>

    <context id="octal" style-ref="base-n-integer">
      <match>\%{n_pre}0[0-7](_?[0-7])*\%{n_suf}</match>
    </context>

    <context id="binary" style-ref="base-n-integer">
      <match>\%{n_pre}0[bB][01](_?[01])*\%{n_suf}</match>
    </context>

    <context id="special-values">
      <include>
        <context ref="self"/>
        <context ref="false"/>
        <context ref="true"/>
        <context ref="nil"/>
      </include>
    </context>

    <context id="self" style-ref="self">
      <match>self\%{n_suf}</match>
    </context>

    <context id="false" style-ref="false">
      <match>false\%{n_suf}</match>
    </context>

    <context id="true" style-ref="true">
      <match>true\%{n_suf}</match>
    </context>

    <context id="nil" style-ref="nil">
      <match>nil\%{n_suf}</match>
    </context>

    <context id="block-parameters">
      <start>(?&lt;=do|\{)\s*(\|)</start>
      <end>\|</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="keyword"/>
        <context sub-pattern="0" where="end"   style-ref="keyword"/>

        <context ref="important-constants"/>
        <context ref="constants"/>

        <context ref="special-variables"/>
        <context ref="global-variables"/>
        <context ref="methods"/>

        <context ref="class-variables"/>
        <context ref="instance-variables"/>
      </include>
    </context>


    <!-- in double quotes and backticks
         FIXME: really would like for the syntax highlight to go back
         to none here, as any ruby code could go here
    -->
    <context id="interpolation" style-ref="text">
      <start>#{</start>
      <end>}</end>
      <include>
        <context ref="ruby:*"/>
      </include>
    </context>


    <context id="symbols" style-ref="symbol">
      <match>(?&lt;!:):[a-zA-Z0-9_]+(!|\?)?</match>
    </context>

    <context id="symbols-single-quoted" style-ref="symbol">
      <start>:'</start>
      <end>'</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <context id="symbols-double-quoted" style-ref="symbol">
      <start>:"</start>
      <end>"</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <context id="hash-symbols" style-ref="symbol">
      <match>[a-zA-Z0-9_]+(!|\?)?:</match>
    </context>

    <context id="hash-strings" style-ref="string">
      <match>(?&lt;!\s)\:</match>
    </context>

    <context id="syntax-chars" style-ref="collection">
      <match>(=&gt;|[,.()[\]{}*])</match>
    </context>


    <!-- ruby strings do not end at line end,
         so we cannot use def:string
         (parts lifted from perl.lang) -->
    <context id="double-quoted-string" style-ref="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <context id="single-quoted-string" style-ref="string" class-disabled="no-spell-check">
      <start>'</start>
      <end>'</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>


    <!--  %Q{Hello world} %{Hello world} -->
    <context id="double-quoted-string-curly" style-ref="string">
      <start>%Q?\{</start>
      <end>\}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <!-- %Q(Hello world) %(Hello world) -->
    <context id="double-quoted-string-normal" style-ref="string">
      <start>%Q?\(</start>
      <end>\)</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <!-- %Q[Hello world] %[Hello world] -->
    <context id="double-quoted-string-square" style-ref="string">
      <start>%Q?\[</start>
      <end>\]</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <!-- %Q<Hello world> %<Hello world> -->
    <context id="double-quoted-string-angle" style-ref="string">
      <start>%Q?&lt;</start>
      <end>&gt;</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <!-- %Q-Hello world- %-Hello world- %+hello world+ and so on...
         %>some text> is still valid, but is not included to avoid conflicts
         when using with erb tags inside rhtml documents.
    -->
    <context id="double-quoted-string-generic" style-ref="string">
      <start>%Q?([^[:alpha:]&gt;])</start>
      <end>\%{1@start}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <!-- Basicly same as above but with no support for interpolations
         %q{Hello world} -->
    <context id="single-quoted-string-curly" style-ref="string">
      <start>%q\{</start>
      <end>\}</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %q(Hello world) -->
    <context id="single-quoted-string-normal" style-ref="string">
      <start>%q\(</start>
      <end>\)</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %q[Hello world] -->
    <context id="single-quoted-string-square" style-ref="string">
      <start>%q\[</start>
      <end>\]</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %q<Hello world> -->
    <context id="single-quoted-string-angle" style-ref="string">
      <start>%q&lt;</start>
      <end>&gt;</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %q-Hello world- %q+Hello world+ %q*Hello world* and so on... -->
    <context id="single-quoted-string-generic" style-ref="string">
      <start>%q([^[:alpha:]&gt;])</start>
      <end>\%{1@start}</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- Arrays of strings
         %W{Array of #{interpolated} strings} -->
    <context id="double-quoted-word-array-curly" style-ref="string">
      <start>%W\{</start>
      <end>\}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <!-- %W(Array of #{interpolated} strings) -->
    <context id="double-quoted-word-array-normal" style-ref="string">
      <start>%W\(</start>
      <end>\)</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <!-- %W[Array of #{interpolated} strings] -->
    <context id="double-quoted-word-array-square" style-ref="string">
      <start>%W\[</start>
      <end>\]</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <!-- %W<Array of #{interpolated} strings> -->
    <context id="double-quoted-word-array-angle" style-ref="string">
      <start>%W&lt;</start>
      <end>&gt;</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <!-- %W-Array of #{interpolated} strings-
         %W+Array of #{interpolated} strings+
         y%W*Array of #{interpolated} strings* and so on... -->
    <context id="double-quoted-word-array-generic" style-ref="string">
      <start>%W([^[:alpha:]\s])</start>
      <end>\%{1@start}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <!-- Basicly same as above but with no support for interpolations -->
    <!-- %w{Array of strings} -->
    <context id="single-quoted-word-array-curly" style-ref="string">
      <start>%w\{</start>
      <end>\}</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %w(Array of strings) -->
    <context id="single-quoted-word-array-normal" style-ref="string">
      <start>%w\(</start>
      <end>\)</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %w[Array of strings] -->
    <context id="single-quoted-word-array-square" style-ref="string">
      <start>%w\[</start>
      <end>\]</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %w<Array of strings> -->
    <context id="single-quoted-word-array-angle" style-ref="string">
      <start>%w&lt;</start>
      <end>&gt;</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %w-Array of strings- %w+Array of strings+ %w*Array of strings* and so on... -->
    <context id="single-quoted-word-array-generic" style-ref="string">
      <start>%w([^[:alpha:]\s])</start>
      <end>\%{1@start}</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <context id="question-mark-string" style-ref="character">
      <match>(?&lt;![\w\.])\?((\\[MC]-){1,2}|\\?)\S</match>
    </context>

    <context id="backtick-quoted-string" style-ref="string">
      <start>`</start>
      <end>`</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <context id="backtick-quoted-string-curly" style-ref="string">
      <start>%x\{</start>
      <end>\}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <context id="backtick-quoted-string-normal" style-ref="string">
      <start>%x\(</start>
      <end>\)</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <context id="backtick-quoted-string-square" style-ref="string">
      <start>%x\[</start>
      <end>\]</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <context id="backtick-quoted-string-angle" style-ref="string">
      <start>%x&lt;</start>
      <end>&gt;</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <context id="backtick-quoted-string-generic" style-ref="string">
      <start>%x([^[:alpha:]\s])</start>
      <end>\%{1@start}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <define-regex id="start-heredoc">([^a-zA-Z0-9\s\]\)&gt;}])\s*&lt;&lt;</define-regex>

    <context id="heredoc-string" style-ref="heredoc" style-inside="true">
      <start>\%{start-heredoc}(\w+)</start>
      <end>^\%{2@start}</end>
      <include>
        <context where="start" sub-pattern="1" style-ref="operator"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <context id="heredoc-indented-string" style-ref="heredoc" style-inside="true">
      <start>\%{start-heredoc}-(\w+)</start>
      <end>^\s*\%{2@start}</end>
      <include>
        <context where="start" sub-pattern="1" style-ref="operator"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>

    <context id="heredoc-single-quoted-string" style-ref="heredoc" style-inside="true">
      <start>\%{start-heredoc}'(\w+)'</start>
      <end>^\%{2@start}</end>
      <include>
        <context where="start" sub-pattern="1" style-ref="operator"/>
      </include>
    </context>

    <context id="heredoc-double-quoted-string" style-ref="heredoc" style-inside="true">
      <start>\%{start-heredoc}"(\w+)"</start>
      <end>^\%{2@start}</end>
      <include>
        <context where="start" sub-pattern="1" style-ref="operator"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>
    
    <context id="heredoc-backtick-quoted-string" style-ref="heredoc" style-inside="true">
      <start>\%{start-heredoc}`(\w+)`</start>
      <end>^\%{2@start}</end>
      <include>
        <context where="start" sub-pattern="1" style-ref="operator"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>
    
    <context id="heredoc-single-quoted-indented-string" style-ref="heredoc" style-inside="true">
      <start>\%{start-heredoc}-'(\w+)'</start>
      <end>^\s*\%{2@start}</end>
      <include>
        <context where="start" sub-pattern="1" style-ref="operator"/>
      </include>
    </context>

    <context id="heredoc-double-quoted-indented-string" style-ref="heredoc" style-inside="true">
      <start>\%{start-heredoc}-"(\w+)"</start>
      <end>^\s*\%{2@start}</end>
      <include>
        <context where="start" sub-pattern="1" style-ref="operator"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>
    
    <context id="heredoc-backtick-quoted-indented-string" style-ref="heredoc" style-inside="true">
      <start>\%{start-heredoc}-`(\w+)`</start>
      <end>^\s*\%{2@start}</end>
      <include>
        <context where="start" sub-pattern="1" style-ref="operator"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
      </include>
    </context>
    
    <define-regex id="regex-opts">([iomx]*[neus]?[iomx]*)</define-regex>

    <context id="regex-bracketed" style-ref="escape" style-inside="true">
      <start>(?&lt;!\\)[[]</start>
      <end>(?&lt;!\\)]</end>
    </context>

    <context id="regex-curly" style-ref="regex">
      <start>%r\{</start>
      <end>(\})%{regex-opts}</end>
      <include>
        <context where="end"   sub-pattern="2" style-ref="regex-options"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
        <context ref="regex-bracketed"/>
      </include>
    </context>

    <context id="regex-normal" style-ref="regex">
      <start>%r\(</start>
      <end>(\))%{regex-opts}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
        <context ref="regex-bracketed"/>
      </include>
    </context>

    <context id="regex-square" style-ref="regex">
      <start>%r\[</start>
      <end>(\])%{regex-opts}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
        <context ref="regex-bracketed"/>
      </include>
    </context>

    <context id="regex-angle" style-ref="regex">
      <start>%r&lt;</start>
      <end>(&gt;)\%{regex-opts}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
        <context ref="regex-bracketed"/>
      </include>
    </context>

    <context id="regex-generic" style-ref="regex">
      <start>%r([^[:alpha:]\s])</start>
      <end>(\%{1@start})\%{regex-opts}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
        <context ref="regex-bracketed"/>
       </include>
     </context>

    <context id="regex" style-ref="regex">
      <start extended="true">
        ((?&lt;=([(]|\s))|^)
        \/
        (?=
          ([^/\\]*(\\.))*
          [^/]*
          \/
          \%{regex-opts}
          ([),;.]|\s|$)
        )</start>
      <end>(\/)\%{regex-opts}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="interpolation"/>
        <context ref="regex-bracketed"/>
      </include>
    </context>

    <context id="hash">
      <start>\{</start>
      <end>\}</end>
      <include>
        <context where="start" sub-pattern="0" style-ref="collection"/>
        <context where="end" sub-pattern="0" style-ref="collection"/>
        <context ref="hash-symbols"/>
        <context ref="hash-strings"/>
        <context ref="ruby:*"/>
      </include>
    </context>

    <context id="array">
      <start>(?&lt;!\w)\[</start>
      <end>\]</end>
      <include>
        <context where="start" sub-pattern="0" style-ref="collection"/>
        <context where="end" sub-pattern="0" style-ref="collection"/>
        <context ref="ruby:*"/>
      </include>
    </context>

    <context id="ruby" class="no-spell-check">
      <include>
        <context ref="def:shebang"/>
        <context ref="encoding-comment"/>
        <context ref="shell-like-comment"/><!-- not from def -->
        <context ref="multiline-comment"/>

        <context ref="heredoc-string"/>
        <context ref="heredoc-single-quoted-string"/>
        <context ref="heredoc-double-quoted-string"/>
        <context ref="heredoc-backtick-quoted-string"/>
        <context ref="heredoc-indented-string"/>
        <context ref="heredoc-single-quoted-indented-string"/>
        <context ref="heredoc-double-quoted-indented-string"/>
        <context ref="heredoc-backtick-quoted-indented-string"/>

        <context ref="symbols"/>
        <context ref="symbols-single-quoted"/>
        <context ref="symbols-double-quoted"/>

        <context ref="double-quoted-string"/>
        <context ref="double-quoted-string-curly"/>
        <context ref="double-quoted-string-normal"/>
        <context ref="double-quoted-string-square"/>
        <context ref="double-quoted-string-angle"/>
        <context ref="double-quoted-string-generic"/>
        <context ref="single-quoted-string"/>
        <context ref="single-quoted-string-curly"/>
        <context ref="single-quoted-string-normal"/>
        <context ref="single-quoted-string-square"/>
        <context ref="single-quoted-string-angle"/>
        <context ref="single-quoted-string-generic"/>
        <context ref="question-mark-string"/>

        <context ref="double-quoted-word-array-curly"/>
        <context ref="double-quoted-word-array-normal"/>
        <context ref="double-quoted-word-array-square"/>
        <context ref="double-quoted-word-array-angle"/>
        <context ref="double-quoted-word-array-generic"/>
        <context ref="single-quoted-word-array-curly"/>
        <context ref="single-quoted-word-array-normal"/>
        <context ref="single-quoted-word-array-square"/>
        <context ref="single-quoted-word-array-angle"/>
        <context ref="single-quoted-word-array-generic"/>

        <context ref="regex"/>
        <context ref="regex-curly"/>
        <context ref="regex-normal"/>
        <context ref="regex-square"/>
        <context ref="regex-angle"/>
        <context ref="regex-generic"/>

        <context ref="backtick-quoted-string"/>
        <context ref="backtick-quoted-string-curly"/>
        <context ref="backtick-quoted-string-normal"/>
        <context ref="backtick-quoted-string-square"/>
        <context ref="backtick-quoted-string-angle"/>
        <context ref="backtick-quoted-string-generic"/>

        <context ref="function"/>

        <context ref="important-methods"/>
        <context ref="keywords"/>
        <context ref="special-values"/>

        <context ref="important-constants"/>
        <context ref="constants"/>

        <context ref="special-variables"/>
        <context ref="global-variables"/>
        <context ref="methods"/>

        <context ref="class-variables"/>
        <context ref="instance-variables"/>

        <context ref="block-parameters"/>
        <context ref="hash"/>
        <context ref="array"/>

        <context ref="float"/>
        <context ref="integer"/>
        <context ref="hex"/>
        <context ref="octal"/>
        <context ref="binary"/>

        <context ref="operators"/>

        <context ref="syntax-chars"/>
      </include>
    </context>
 </definitions>
</language>

